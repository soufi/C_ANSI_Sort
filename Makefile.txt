
# Compilteur 
CC  :=  gcc
#options de compilation
CFLAGS :=  -ansi -Wall -Wextra -pedantic -ggdb


MODULE := file trier_monotonie 
HEADERS := $(MODULE:%=%.h) 

.PHONY : all tester debug memoire


# si vous faites un programme de test 
#all : trier tester_trier
# sinon
all : trier 


# Règle de compilation
%.o : %.c  $(HEADERS) 
	$(CC) -c $(CFLAGS) -o $@ $<

trier : $(MODULE:%=%.o) $(HEADERS) trier.c 
	$(CC) $(CFLAGS) -o $@  $(MODULE:%=%.o) trier.c 


# pour le programme de test 
tester_trier : $(MODULE:%=%.o) $(HEADERS) tester_trier.c 
	$(CC) $(CFLAGS) -o $@ $(MODULE:%=%.o) tester_trier.c


tst : tester_trier
	./tester_trier |head

# Fichier à trier pour effectuer les tests
TEST_FILE := trier.c

tester : trier
	./trier < $(TEST_FILE) > $(TEST_FILE).trie
# pour que sort fonctionne avec 'native byte value'
	LC_ALL=C ; sort  < $(TEST_FILE) > $(TEST_FILE).sorted
	if diff $(TEST_FILE).trie $(TEST_FILE).sorted ; then echo "OK" ; else echo "SOUCIS" ; fi

debug :
	nemiver ./trier < $(TEST_FILE)


memoire : trier
	valgrind --leak-check=full ./trier < $(TEST_FILE)
